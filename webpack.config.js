'use strict';

let path = require('path'); // техническая переменная

module.exports = { // объект настроек
  mode: 'production', // режим работы webpack(второй production - стоит по-умолчанию без конфига(режим создания продукта, работает чуть медленнее, но проводит необходимую оптимизацию кода)). При режиме дев - сборка происходит быстрее
  entry: './js/script.js', // тот файл, с которого мы начинаем. тут прописываются все зависимости require/import. Тут можно подключить несоклько файлов - тогда нужно будет создать объект - как это делается? -> есть в документации этого свойства
  output: { // файл выхода
    filename: 'bundle.js', // его название
    path: __dirname + '/js' // куда будем складывать
  },
  watch: true, // отслеживает изменения файлов и в автоматическом режиме будет пересобирать каждый раз проект

  devtool: "source-map", // хранит информацию об исходниках и месторасположении кода(т.к. после сборки webpack он преобразуется и минифицируется)

  module: {
    rules: [
      {
        test: /\.m?js$/, // регулярное выражение - находим js-файлы
        exclude: /(node_modules|bower_components)/, // те файлы, которые испключаем из выборки
        use: {  // как будем использовать модуль
          loader: 'babel-loader', // доп.технология, которая связывает webpack с babel
          options: {
            presets: [['@babel/preset-env', {
                debug: true, // позволяет увидеть какие-то проблемы во время компиляции
                corejs: 3, // 
                useBuiltIns: "usage" // выбирает только нужные полифиллы
            }]]
          }
        }
      }
    ]
  } // модули webpack (например, babel)
  // еще может быть свойство plugins - используется редко, т.к. почти все необходимые плагины включены вво внутрь webpack
};
